package com.greendao.dao;

import java.util.List;
import com.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "WORD".
 */
public class Word {

    private Long id;
    private Long shanbay_id;
    private Long learning_id;
    private String word;
    private String pronounce;
    private String definition;
    private String audio;
    private String audio_local;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WordDao myDao;

    private List<Sentence> sentenceList;

    public Word() {
    }

    public Word(Long id) {
        this.id = id;
    }

    public Word(Long id, Long shanbay_id, Long learning_id, String word, String pronounce, String definition, String audio, String audio_local) {
        this.id = id;
        this.shanbay_id = shanbay_id;
        this.learning_id = learning_id;
        this.word = word;
        this.pronounce = pronounce;
        this.definition = definition;
        this.audio = audio;
        this.audio_local = audio_local;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getShanbay_id() {
        return shanbay_id;
    }

    public void setShanbay_id(Long shanbay_id) {
        this.shanbay_id = shanbay_id;
    }

    public Long getLearning_id() {
        return learning_id;
    }

    public void setLearning_id(Long learning_id) {
        this.learning_id = learning_id;
    }

    public String getWord() {
        return word;
    }

    public void setWord(String word) {
        this.word = word;
    }

    public String getPronounce() {
        return pronounce;
    }

    public void setPronounce(String pronounce) {
        this.pronounce = pronounce;
    }

    public String getDefinition() {
        return definition;
    }

    public void setDefinition(String definition) {
        this.definition = definition;
    }

    public String getAudio() {
        return audio;
    }

    public void setAudio(String audio) {
        this.audio = audio;
    }

    public String getAudio_local() {
        return audio_local;
    }

    public void setAudio_local(String audio_local) {
        this.audio_local = audio_local;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Sentence> getSentenceList() {
        if (sentenceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SentenceDao targetDao = daoSession.getSentenceDao();
            List<Sentence> sentenceListNew = targetDao._queryWord_SentenceList(shanbay_id);
            synchronized (this) {
                if(sentenceList == null) {
                    sentenceList = sentenceListNew;
                }
            }
        }
        return sentenceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSentenceList() {
        sentenceList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
