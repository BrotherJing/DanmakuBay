package com.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.greendao.dao.Sentence;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENTENCE".
*/
public class SentenceDao extends AbstractDao<Sentence, Long> {

    public static final String TABLENAME = "SENTENCE";

    /**
     * Properties of entity Sentence.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sentence = new Property(1, String.class, "sentence", false, "SENTENCE");
        public final static Property Translation = new Property(2, String.class, "translation", false, "TRANSLATION");
        public final static Property Shanbay_id = new Property(3, Long.class, "shanbay_id", false, "SHANBAY_ID");
    };

    private Query<Sentence> word_SentenceListQuery;

    public SentenceDao(DaoConfig config) {
        super(config);
    }
    
    public SentenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENTENCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SENTENCE\" TEXT," + // 1: sentence
                "\"TRANSLATION\" TEXT," + // 2: translation
                "\"SHANBAY_ID\" INTEGER);"); // 3: shanbay_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENTENCE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sentence entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sentence = entity.getSentence();
        if (sentence != null) {
            stmt.bindString(2, sentence);
        }
 
        String translation = entity.getTranslation();
        if (translation != null) {
            stmt.bindString(3, translation);
        }
 
        Long shanbay_id = entity.getShanbay_id();
        if (shanbay_id != null) {
            stmt.bindLong(4, shanbay_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sentence readEntity(Cursor cursor, int offset) {
        Sentence entity = new Sentence( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sentence
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // translation
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // shanbay_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sentence entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSentence(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTranslation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShanbay_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sentence entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sentence entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sentenceList" to-many relationship of Word. */
    public List<Sentence> _queryWord_SentenceList(Long shanbay_id) {
        synchronized (this) {
            if (word_SentenceListQuery == null) {
                QueryBuilder<Sentence> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Shanbay_id.eq(null));
                word_SentenceListQuery = queryBuilder.build();
            }
        }
        Query<Sentence> query = word_SentenceListQuery.forCurrentThread();
        query.setParameter(0, shanbay_id);
        return query.list();
    }

}
